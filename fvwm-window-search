#!/usr/bin/env ruby

require_relative './lib'
include FvwmWindowSearch
require 'yaml'
require 'optparse'

def options
  default = {
    "dmenu" => {               # each key is a corresponding CL option
      "selhook" => File.join(__dir__, "focus.sh %s"),
      "selhook-return-key-focus-only" => false,
      "fn" => "Monospace-10",
      "l" => 8,
      "b" => true,
      "i" => true,
    },
    "filter-out" => {
      "name" => [],
      "resource" => [],
      "class" => ['^Fvwm', '!^FvwmIdent$']
    }
  }

  cl = options_load_cl
  env = deep_merge(default, options_load_file(cl) || {})
  deep_merge env, cl
end

def options_load_cl
  opt = { "dmenu" => {} }
  OptionParser.new do |o|
    o.on("-c path", "an alternative path to conf.yaml") { |v| opt["conf"] = v }
    o.on("-r", "focus a window only if Return is pressed") do
      opt["dmenu"]["selhook-return-key-focus-only"] = true
    end
  end.parse!
  opt
end

def options_load_file opt       # return nil if config wasn't found
  conf = opt["conf"] || -> do
    xdg_config_home = ENV['XDG_CONFIG_HOME'] || File.expand_path('~/.config')
    File.join xdg_config_home, 'fvwm-window-search', 'conf.yaml'
  end.call
  r = File.read conf rescue nil
  YAML.load r, conf rescue errx 1, "invalid config: #{$!}" if r
end

def menu params, text
  cmd = [File.join(__dir__, "_out/dmenu/dmenu")]
  params = params.map do |k,v|
    k = "-"+k
    if !!v == v
      v ? k : nil
    else
      [k,v]
    end
  end.reject(&:nil?).flatten.map(&:to_s)
  IO.popen(cmd + params, 'w') { |ios| ios.puts text }
end

def main
  opt = options
  begin
    winlist = windows_filter_out opt["filter-out"], windows
  rescue RegexpError
    errx 1, "filter-out: #{$!}"
  end
  winlist = winlist.map do |w|
    desk = w['desk'] == -1 ? '*' : w['desk']
    [desk, w['class'], w['name'], w['host'], '0x'+w['id'].to_s(16)].join ' | '
  end.join "\n"

  menu opt["dmenu"], winlist
end

main
